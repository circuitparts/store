{
	"root": true,
	"parser": "@typescript-eslint/parser",
	"parserOptions": {
		"project": true
	},
	"plugins": ["@typescript-eslint", "react-hooks"],
	"extends": [
		"next/core-web-vitals",
		"plugin:@typescript-eslint/recommended-type-checked",
		"plugin:@typescript-eslint/stylistic-type-checked"
	],
	"rules": {
		// These opinionated rules
		// Feel free to reconfigure them to your own preference.
		"react-hooks/rules-of-hooks": "error", // Checks rules of Hooks
		"react-hooks/exhaustive-deps": "warn", // Checks effect dependencies
		"@typescript-eslint/array-type": "error",
		"@typescript-eslint/no-array-delete": "error",
		"@typescript-eslint/no-explicit-any": "error",
		"@typescript-eslint/consistent-type-definitions": "off",
		"@typescript-eslint/ban-types": "error",
		"@typescript-eslint/explicit-function-return-type": "off",
		"@typescript-eslint/no-confusing-non-null-assertion": "error",
		"@typescript-eslint/no-confusing-void-expression": ["error", { "ignoreArrowShorthand": true }],
		"@typescript-eslint/no-duplicate-enum-values": "error",
		"@typescript-eslint/no-duplicate-type-constituents": "error",
		"@typescript-eslint/no-empty-interface": "error",
		"@typescript-eslint/no-extra-non-null-assertion": "error",
		"@typescript-eslint/no-for-in-array": "error",
		"@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
		"@typescript-eslint/no-non-null-asserted-optional-chain": "error",
		"@typescript-eslint/no-non-null-assertion": "error",
		"@typescript-eslint/no-redundant-type-constituents": "error",
		"@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
		"@typescript-eslint/no-unnecessary-type-assertion": "error",
		"@typescript-eslint/no-unnecessary-condition": "error",
		"@typescript-eslint/no-unnecessary-type-constraint": "error",
		"@typescript-eslint/no-unsafe-argument": "error",
		"@typescript-eslint/no-unsafe-assignment": "error",
		"@typescript-eslint/no-unsafe-call": "error",
		"@typescript-eslint/no-unsafe-return": "error",
		"@typescript-eslint/no-unsafe-unary-minus": "error",
		"@typescript-eslint/no-useless-empty-export": "error",
		"@typescript-eslint/no-useless-template-literals": "error",
		"@typescript-eslint/prefer-as-const": "error",
		"@typescript-eslint/prefer-for-of": "error",
		"@typescript-eslint/prefer-includes": "error",
		"@typescript-eslint/prefer-nullish-coalescing": "error",
		"@typescript-eslint/prefer-optional-chain": "error",
		"@typescript-eslint/prefer-string-starts-ends-with": "error",
		"@typescript-eslint/require-array-sort-compare": "error",
		"@typescript-eslint/restrict-plus-operands": "error",

		"@typescript-eslint/consistent-type-imports": [
			"warn",
			{
				"prefer": "type-imports",
				"fixStyle": "separate-type-imports"
			}
		],
		"@typescript-eslint/no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }],
		"@typescript-eslint/require-await": "off",
		"@typescript-eslint/no-misused-promises": [
			"error",
			{
				"checksVoidReturn": { "attributes": false }
			}
		],
		"@typescript-eslint/naming-convention": [
			"warn",
			{
				"selector": "variable",
				"types": ["boolean"],
				"format": ["PascalCase"],
				"prefix": ["is", "should", "has", "can", "did", "will"]
			},
			{
				"selector": "variable",
				"modifiers": ["const"],
				"format": ["UPPER_CASE", "camelCase"]
			},
			{
				"selector": "variable",
				"types": ["function"],
				"format": ["PascalCase", "camelCase"]
			},
			{
				"selector": "variable",
				"modifiers": ["destructured"],
				"format": null
			},
			{
				"selector": "parameter",
				"format": ["camelCase"],
				"leadingUnderscore": "allow"
			},
			{
				"selector": "typeLike",
				"format": ["PascalCase"]
			}
		]
	},
	"overrides": [
		{
			"files": ["*-context.tsx"], // ignore react context files.
			"rules": {
				"@typescript-eslint/naming-convention": [
					"warn",
					{
						"selector": "variable",
						"modifiers": ["const"],
						"format": ["PascalCase", "camelCase", "UPPER_CASE"]
					}
				]
			}
		}
	]
}
